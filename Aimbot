local Players = game:GetService('Players')
local Workspace = game:GetService('Workspace')
local RunService = game:GetService('RunService')
local UserInputService = game:GetService('UserInputService')

local PLAYER = Players.LocalPlayer
local MOUSE = PLAYER:GetMouse()
local CC = Workspace.CurrentCamera

local ENABLED = false -- Disable the aimbot initially
local AIM_AT = 'Head'
local MAX_DISTANCE = 50 -- Maximum distance to aim at players
local LOCK_BUTTON = Enum.KeyCode.ButtonR2 -- R2 button on the controller

local currentTarget = nil
local isLocked = false -- Indicates whether the aimbot is currently locked

-- Function to get the nearest player to the cursor
function GetNearestPlayerToCursor()
    local nearestPlayer = nil
    local shortestDistance = math.huge

    for _, v in pairs(Players:GetPlayers()) do
        if v ~= PLAYER and v.Character and v.Character:FindFirstChild(AIM_AT) then
            local AIM = v.Character[AIM_AT]
            local screenPoint = CC:WorldToViewportPoint(AIM.Position)
            local mousePos = Vector2.new(MOUSE.X, MOUSE.Y)
            local distanceToCursor = (Vector2.new(screenPoint.X, screenPoint.Y) - mousePos).Magnitude
            local distanceToPlayer = (AIM.Position - PLAYER.Character.Head.Position).Magnitude

            -- Check if the player is on a different team
            if v.Team ~= PLAYER.Team and distanceToCursor < shortestDistance and distanceToPlayer <= MAX_DISTANCE then
                shortestDistance = distanceToCursor
                nearestPlayer = v
            end
        end
    end

    return nearestPlayer
end

-- Function to check if the player is alive
function IsPlayerAlive(player)
    return player.Character and player.Character:FindFirstChild('Humanoid') and player.Character.Humanoid.Health > 0
end

-- Function to handle input from the controller
function onInput(input, gameProcessed)
    if not gameProcessed and input.UserInputType == Enum.UserInputType.Gamepad1 then
        if input.KeyCode == LOCK_BUTTON then
            if isLocked then
                -- Unlock if already locked
                currentTarget = nil
                isLocked = false
                print("Unlocked from target.")
            else
                -- Lock onto new target
                local nearestPlayer = GetNearestPlayerToCursor()
                if nearestPlayer and IsPlayerAlive(nearestPlayer) then
                    currentTarget = nearestPlayer
                    isLocked = true
                    print("Locked onto:", currentTarget.Name)
                end
            end
        end
    end
end

UserInputService.InputBegan:Connect(onInput)

-- Function to handle chat commands
function onChatted(message)
    if message:lower() == "/e aimbot on" then
        ENABLED = true
        print("Aimbot enabled.")
    elseif message:lower() == "/e aimbot off" then
        ENABLED = false
        currentTarget = nil
        isLocked = false
        print("Aimbot disabled.")
    end
end

PLAYER.Chatted:Connect(onChatted)

RunService.RenderStepped:Connect(function()
    if ENABLED and isLocked then
        if currentTarget then
            local AIM = currentTarget.Character:FindFirstChild(AIM_AT)
            local distanceToPlayer = (AIM and (AIM.Position - PLAYER.Character.Head.Position).Magnitude) or math.huge

            if AIM and distanceToPlayer <= MAX_DISTANCE and IsPlayerAlive(currentTarget) then
                CC.CFrame = CFrame.new(CC.CFrame.Position, AIM.Position)
                print("Aiming at:", currentTarget.Name, "Head Position:", AIM.Position)
            else
                print("Lost target or target is no longer alive:", currentTarget.Name)
                currentTarget = nil
                isLocked = false
            end
        end
    end
end)
